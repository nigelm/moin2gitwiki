{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MoinMoin To Git (Markdown) Wiki Converter App to convert a MoinMoin wiki file tree into a git based wiki as used on github, gitlab or gitea. Current Version Version: 0.5.0 Translation Method Originally the intention was to translate purely by converting the MoinMoin markup to markdown markup - using the MoinMoin data retrieved from the filesystem. However, although it makes determining the overall page list and revision list much easier, it was found that translating the wiki markup at this level was too complex and fragile for this to work without a huge amount of special casing. So, after the revision structure is derived from the filesystem, each page revision is retrieved by http requests to the running MoinMoin wiki. This is then reduced to just the page content (by picking out the content div from the html), and some light editing applied to simplify the HTML - specifically:- Remove the anchor spans that MoinMoin adds - these add no visual or readable content, but confuse the translator Remove paragraph entries with CSS classes that start line - these again appear to be for non-required purposes (likely for showing diffs between revisions) - and they break the translator Fix links that point within the wiki - if the target does not exist then the text is left but the link removed. Strips CSS classes off links - again these upset the translator Translate any images that appear to be MoinMoin emoji characters (which are rendered as images) into gollum emoji characters This simplified HTML is then passed through the pandoc command:- pandoc -f html -t gfm And the resulting Github flavoured Markdown is taken as the new form. This handles the vast majority of normal markup correctly, including lists and many types of tables. Some complicated markup or complex tables end up being passed through as HTML - which displays correctly but is less easy to parse and edit. Attachments that are available in the wiki are also handled - they are put into a _attachments directory under a subdirectory named for the original page directory name. Links to attachments should be handled correctly. Issues The overall process is not particularly fast. But this should be something you only do once (or a few attempts) so raw speed is not needed. Attachments are not versioned by MoinMon. This means any attachment that was deleted from MoinMoin is no longer available to put into the converted wiki. Any attachment that was updated a few times is only available in the last version (but will probably be inserted into the history at the point where it first appeared but with the latest content). Installation I have now made this available as a pypi package, in which case it can be installed by running pip install moin2gitwiki However to use it you will also need to install the pandoc and git packages as these commands are run during the conversion. However it can be installed from the repo - it uses poetry to manage dependancies etc, so the best way to make use of this is to install poetry for your python version and then:- poetry install the command can then be run as poetry run moin2gitwiki ... Todo Make tests effective","title":"Overview"},{"location":"#moinmoin-to-git-markdown-wiki-converter","text":"App to convert a MoinMoin wiki file tree into a git based wiki as used on github, gitlab or gitea.","title":"MoinMoin To Git (Markdown) Wiki Converter"},{"location":"#current-version","text":"Version: 0.5.0","title":"Current Version"},{"location":"#translation-method","text":"Originally the intention was to translate purely by converting the MoinMoin markup to markdown markup - using the MoinMoin data retrieved from the filesystem. However, although it makes determining the overall page list and revision list much easier, it was found that translating the wiki markup at this level was too complex and fragile for this to work without a huge amount of special casing. So, after the revision structure is derived from the filesystem, each page revision is retrieved by http requests to the running MoinMoin wiki. This is then reduced to just the page content (by picking out the content div from the html), and some light editing applied to simplify the HTML - specifically:- Remove the anchor spans that MoinMoin adds - these add no visual or readable content, but confuse the translator Remove paragraph entries with CSS classes that start line - these again appear to be for non-required purposes (likely for showing diffs between revisions) - and they break the translator Fix links that point within the wiki - if the target does not exist then the text is left but the link removed. Strips CSS classes off links - again these upset the translator Translate any images that appear to be MoinMoin emoji characters (which are rendered as images) into gollum emoji characters This simplified HTML is then passed through the pandoc command:- pandoc -f html -t gfm And the resulting Github flavoured Markdown is taken as the new form. This handles the vast majority of normal markup correctly, including lists and many types of tables. Some complicated markup or complex tables end up being passed through as HTML - which displays correctly but is less easy to parse and edit. Attachments that are available in the wiki are also handled - they are put into a _attachments directory under a subdirectory named for the original page directory name. Links to attachments should be handled correctly.","title":"Translation Method"},{"location":"#issues","text":"The overall process is not particularly fast. But this should be something you only do once (or a few attempts) so raw speed is not needed. Attachments are not versioned by MoinMon. This means any attachment that was deleted from MoinMoin is no longer available to put into the converted wiki. Any attachment that was updated a few times is only available in the last version (but will probably be inserted into the history at the point where it first appeared but with the latest content).","title":"Issues"},{"location":"#installation","text":"I have now made this available as a pypi package, in which case it can be installed by running pip install moin2gitwiki However to use it you will also need to install the pandoc and git packages as these commands are run during the conversion. However it can be installed from the repo - it uses poetry to manage dependancies etc, so the best way to make use of this is to install poetry for your python version and then:- poetry install the command can then be run as poetry run moin2gitwiki ...","title":"Installation"},{"location":"#todo","text":"Make tests effective","title":"Todo"},{"location":"changelog/","text":"Changelog All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning . Unreleased Changes [0.5.0] - 2021-02-01 Make home page generation optional Handle attachments in the wiki [0.4.0] - 2021-01-11 Some str/bytes fixes [0.3.0] - 2021-01-11 Swap out sh for subprocess module for running pandoc Strip extra divs that appear in output [0.2.0] - 2021-01-06 Initial structure Initial CLI structure in place Added moin wiki user parser Added moin revision parser Added basic git fast-import data output - outputs moin markup Added fetch cache and initial macro handling Directly commit into a new git instance Split the wiki translator out into a separate module Rebuild the translator to use pandoc on a preprocessed html fragment Add a synthetic home page to generated wiki Add some docs","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"changelog/#unreleased-changes","text":"","title":"Unreleased Changes"},{"location":"changelog/#050-2021-02-01","text":"Make home page generation optional Handle attachments in the wiki","title":"[0.5.0] - 2021-02-01"},{"location":"changelog/#040-2021-01-11","text":"Some str/bytes fixes","title":"[0.4.0] - 2021-01-11"},{"location":"changelog/#030-2021-01-11","text":"Swap out sh for subprocess module for running pandoc Strip extra divs that appear in output","title":"[0.3.0] - 2021-01-11"},{"location":"changelog/#020-2021-01-06","text":"Initial structure Initial CLI structure in place Added moin wiki user parser Added moin revision parser Added basic git fast-import data output - outputs moin markup Added fetch cache and initial macro handling Directly commit into a new git instance Split the wiki translator out into a separate module Rebuild the translator to use pandoc on a preprocessed html fragment Add a synthetic home page to generated wiki Add some docs","title":"[0.2.0] - 2021-01-06"},{"location":"commands/","text":"MoinMoin To Git Wiki Conversion Tools The tools are a set of command line tools under the name moin2gitwiki . moin2gitwiki MoinMoin To Git Wiki Tools Command Line Utility Converts a MoinMoin wiki into a git repository populated with Markdown formatted pages, set up for use on a git based wiki such as the built in wiki for gitea , github or gitlab This parses the users and the revision structure from the MoinMoin data filesystem. However converting the wiki markup was found to be best done by converting the output HTML using pandoc . The utility requires git and pandoc commands to be available in the path. Environment Variables The common options can also be set by use of environment variables: --debug - MOIN2GIT_DEBUG - Output debugging logging --verbose - MOIN2GIT_VERBOSE - Output verbose logging --syslog - MOIN2GIT_SYSLOG - Send logging to syslog --moin-data - MOIN2GIT_DATA - Data directory for moin --user-map - MOIN2GIT_USERS - User map for moin - see the save-users command for info cache-directory - MOIN2GIT_CACHE - Directory for moin component fetches. This defaults to _cache in the current directory. Help Running the moin2gitwiki command on its own will show some help information. Usage: moin2gitwiki [OPTIONS] COMMAND [ARGS]... Options: --debug / --no-debug --verbose / --no-verbose --syslog / --no-syslog --moin-data DIRECTORY --user-map FILE --version Show the version and exit. check A minimal check to see if we run in this environment Usage: moin2gitwiki check [OPTIONS] fast-export Git fast-export all the revisions in the wiki into markdown git wiki form Named for the git fast-export command, although it actually builds a new git repository and then translates each revision at a time into a command stream for git-fast-import on that new repository. After all pages and revisions have been processed the new git wiki repo instance is garbage collected (to compress all the revisions into a more compact set of git packs) and finally checked out. Page names are slightly modified - the \"(2f)\" seen in wiki file names (which is normally displayed as a / character) are changed to underscores. Internal links are remapped - however if a link goes within the wiki namespace to something that was not found in the wiki (this may include attachments which are not currently bought across), then the link is deleted (although the link text is left). Although the filesystem data is read to derive the revision and history information, the actual page transformation is done by retrieving the page html from its webserver, cutting the content div out of that html, doing a few simplifications and translations (specifcially images corresponding to emojis are converted to emoji forms). This HTML is then pass through pandoc to get a markdown (specifically github flavoured markdown). Usage: moin2gitwiki fast-export [OPTIONS] DESTINATION Options: --cache-directory TEXT --url-prefix, --prefix TEXT --home-page / --no-home-page save-users Write the user map out to a file This writes all the users found in the wiki out to a JSON file. This can then be modified, if required, and used as the input to the --user-map option - typically this would be to fix any email address or name issues. These user entries are used to set the author of git commits within the output repository. The file format is an JSON file consisting of an array of user records, which each look like:- { \"email\": \"user@example.com\", \"moin_id\": \"1358271613.26.36417\", \"moin_name\": \"SomeUser\" }, Usage: moin2gitwiki save-users [OPTIONS] FILENAME translate-page Fetch a single page revision and translate to Markdown The first argument is a page name, the second an integer revision. The translation process is as described for the fast-export command. Usage: moin2gitwiki translate-page [OPTIONS] PAGE VERSION Options: --cache-directory TEXT --url-prefix, --prefix TEXT","title":"Commands"},{"location":"commands/#moinmoin-to-git-wiki-conversion-tools","text":"The tools are a set of command line tools under the name moin2gitwiki .","title":"MoinMoin To Git Wiki Conversion Tools"},{"location":"commands/#moin2gitwiki","text":"MoinMoin To Git Wiki Tools Command Line Utility Converts a MoinMoin wiki into a git repository populated with Markdown formatted pages, set up for use on a git based wiki such as the built in wiki for gitea , github or gitlab This parses the users and the revision structure from the MoinMoin data filesystem. However converting the wiki markup was found to be best done by converting the output HTML using pandoc . The utility requires git and pandoc commands to be available in the path.","title":"moin2gitwiki"},{"location":"commands/#environment-variables","text":"The common options can also be set by use of environment variables: --debug - MOIN2GIT_DEBUG - Output debugging logging --verbose - MOIN2GIT_VERBOSE - Output verbose logging --syslog - MOIN2GIT_SYSLOG - Send logging to syslog --moin-data - MOIN2GIT_DATA - Data directory for moin --user-map - MOIN2GIT_USERS - User map for moin - see the save-users command for info cache-directory - MOIN2GIT_CACHE - Directory for moin component fetches. This defaults to _cache in the current directory.","title":"Environment Variables"},{"location":"commands/#help","text":"Running the moin2gitwiki command on its own will show some help information. Usage: moin2gitwiki [OPTIONS] COMMAND [ARGS]... Options: --debug / --no-debug --verbose / --no-verbose --syslog / --no-syslog --moin-data DIRECTORY --user-map FILE --version Show the version and exit.","title":"Help"},{"location":"commands/#check","text":"A minimal check to see if we run in this environment Usage: moin2gitwiki check [OPTIONS]","title":"check"},{"location":"commands/#fast-export","text":"Git fast-export all the revisions in the wiki into markdown git wiki form Named for the git fast-export command, although it actually builds a new git repository and then translates each revision at a time into a command stream for git-fast-import on that new repository. After all pages and revisions have been processed the new git wiki repo instance is garbage collected (to compress all the revisions into a more compact set of git packs) and finally checked out. Page names are slightly modified - the \"(2f)\" seen in wiki file names (which is normally displayed as a / character) are changed to underscores. Internal links are remapped - however if a link goes within the wiki namespace to something that was not found in the wiki (this may include attachments which are not currently bought across), then the link is deleted (although the link text is left). Although the filesystem data is read to derive the revision and history information, the actual page transformation is done by retrieving the page html from its webserver, cutting the content div out of that html, doing a few simplifications and translations (specifcially images corresponding to emojis are converted to emoji forms). This HTML is then pass through pandoc to get a markdown (specifically github flavoured markdown). Usage: moin2gitwiki fast-export [OPTIONS] DESTINATION Options: --cache-directory TEXT --url-prefix, --prefix TEXT --home-page / --no-home-page","title":"fast-export"},{"location":"commands/#save-users","text":"Write the user map out to a file This writes all the users found in the wiki out to a JSON file. This can then be modified, if required, and used as the input to the --user-map option - typically this would be to fix any email address or name issues. These user entries are used to set the author of git commits within the output repository. The file format is an JSON file consisting of an array of user records, which each look like:- { \"email\": \"user@example.com\", \"moin_id\": \"1358271613.26.36417\", \"moin_name\": \"SomeUser\" }, Usage: moin2gitwiki save-users [OPTIONS] FILENAME","title":"save-users"},{"location":"commands/#translate-page","text":"Fetch a single page revision and translate to Markdown The first argument is a page name, the second an integer revision. The translation process is as described for the fast-export command. Usage: moin2gitwiki translate-page [OPTIONS] PAGE VERSION Options: --cache-directory TEXT --url-prefix, --prefix TEXT","title":"translate-page"},{"location":"internal/cli/","text":"Command Line Interface Handler moin2gitwiki Command Line Handling Documentation is in the commands part of the documentation - the general internals handling does not parse click decorators very well :-(","title":"CLI"},{"location":"internal/cli/#command-line-interface-handler","text":"","title":"Command Line Interface Handler"},{"location":"internal/cli/#moin2gitwiki.cli","text":"moin2gitwiki Command Line Handling Documentation is in the commands part of the documentation - the general internals handling does not parse click decorators very well :-(","title":"moin2gitwiki.cli"},{"location":"internal/context/","text":"moin2gitwiki context object - carries state between components This contains the basic context object, which has various global state information in it such as the logging objects. Moin2GitContext Moin2GitContext Context Object - holds state, logging, etc Called from the cli code. Sets up all the common requirements. Attributes: Name Type Description debug bool if true we output more debugging chatter verbose bool if true we output more progress information syslog bool if true we additionally log to syslog at debug level logger Logger Logging object moin_data Path Path of the MoinMoin data directory users Moin2GitUserSet Moin user set object create_context ( ** kwargs ) classmethod Create the context object Builds the requirements for the context object and returns an object Source code in moin2gitwiki/context.py @classmethod def create_context ( cls , ** kwargs ): \"\"\" Create the context object Builds the requirements for the context object and returns an object \"\"\" if \"logger\" not in kwargs : logger = logging . getLogger ( \"moin2gitwiki\" ) kwargs [ \"logger\" ] = logger if \"user_map\" in kwargs : user_map = kwargs [ \"user_map\" ] del kwargs [ \"user_map\" ] # # make the paths absolute kwargs [ \"moin_data\" ] = Path ( kwargs [ \"moin_data\" ]) . resolve ( strict = True ) # # build the context object context = cls ( ** kwargs ) context . configure_logger () # # get the users if user_map is not None : context . users = Moin2GitUserSet . load_users_from_file ( path = user_map , logger = context . logger , ) else : context . users = Moin2GitUserSet . load_users_from_wiki_data ( wiki_data_path = context . moin_data , logger = context . logger , ) # return context get_file_handler ( self ) Sets up and returns the file logging handler Returns: Type Description TimedRotatingFileHandler file_handler: logger file handler Source code in moin2gitwiki/context.py def get_file_handler ( self ) -> logging . handlers . TimedRotatingFileHandler : \"\"\" Sets up and returns the file logging handler Returns: file_handler: logger file handler \"\"\" file_handler = logging . handlers . TimedRotatingFileHandler ( LOG_FILE , when = \"midnight\" , ) file_handler . setLevel ( logging . DEBUG ) file_handler . setFormatter ( FILE_FORMATTER ) return file_handler","title":"Context"},{"location":"internal/context/#moin2gitwiki.context","text":"moin2gitwiki context object - carries state between components This contains the basic context object, which has various global state information in it such as the logging objects.","title":"moin2gitwiki.context"},{"location":"internal/context/#moin2gitwiki.context.Moin2GitContext","text":"Moin2GitContext Context Object - holds state, logging, etc Called from the cli code. Sets up all the common requirements. Attributes: Name Type Description debug bool if true we output more debugging chatter verbose bool if true we output more progress information syslog bool if true we additionally log to syslog at debug level logger Logger Logging object moin_data Path Path of the MoinMoin data directory users Moin2GitUserSet Moin user set object","title":"Moin2GitContext"},{"location":"internal/context/#moin2gitwiki.context.Moin2GitContext.create_context","text":"Create the context object Builds the requirements for the context object and returns an object Source code in moin2gitwiki/context.py @classmethod def create_context ( cls , ** kwargs ): \"\"\" Create the context object Builds the requirements for the context object and returns an object \"\"\" if \"logger\" not in kwargs : logger = logging . getLogger ( \"moin2gitwiki\" ) kwargs [ \"logger\" ] = logger if \"user_map\" in kwargs : user_map = kwargs [ \"user_map\" ] del kwargs [ \"user_map\" ] # # make the paths absolute kwargs [ \"moin_data\" ] = Path ( kwargs [ \"moin_data\" ]) . resolve ( strict = True ) # # build the context object context = cls ( ** kwargs ) context . configure_logger () # # get the users if user_map is not None : context . users = Moin2GitUserSet . load_users_from_file ( path = user_map , logger = context . logger , ) else : context . users = Moin2GitUserSet . load_users_from_wiki_data ( wiki_data_path = context . moin_data , logger = context . logger , ) # return context","title":"create_context()"},{"location":"internal/context/#moin2gitwiki.context.Moin2GitContext.get_file_handler","text":"Sets up and returns the file logging handler Returns: Type Description TimedRotatingFileHandler file_handler: logger file handler Source code in moin2gitwiki/context.py def get_file_handler ( self ) -> logging . handlers . TimedRotatingFileHandler : \"\"\" Sets up and returns the file logging handler Returns: file_handler: logger file handler \"\"\" file_handler = logging . handlers . TimedRotatingFileHandler ( LOG_FILE , when = \"midnight\" , ) file_handler . setLevel ( logging . DEBUG ) file_handler . setFormatter ( FILE_FORMATTER ) return file_handler","title":"get_file_handler()"},{"location":"internal/fetch_cache/","text":"FetchCache Implements a local cache for URLs which can be persistant between runs Basic cache directory which contains an index.json file with a table of URLs and the cache file they map to. Has zero intelligence - assumes everything can be cached for ever - which is reasonable considering the things we request via the cache. Attributes: Name Type Description cache_directory Path Path of the cache directory index_path Path Path of the cache index file - normally index.json within cache_directory cache_map dict The dict mapping URLs to filenames within the cache ctx Context object (used for logging etc) fetch ( self , url ) Fetch a URL, from the cache if there, otherwise put a copy into cache Source code in moin2gitwiki/fetch_cache.py def fetch ( self , url : str ) -> str : \"\"\"Fetch a URL, from the cache if there, otherwise put a copy into cache\"\"\" # # is this in the cache already if url in self . cache_map : item_name = self . cache_map [ url ] item_path = self . cache_directory . joinpath ( item_name ) try : content = item_path . read_text () self . ctx . logger . debug ( f \"Retrieved { url } from cache\" ) return content except OSError : pass # just move on to refetch # # if you get here then the url is either not in the cache or we # failed to retrieve it off disk - in either case we just fetch it item_name = uuid . uuid4 () . hex item_path = item_path = self . cache_directory . joinpath ( item_name ) self . ctx . logger . debug ( f \"Fetching { url } \" ) try : response = requests . get ( url ) content = response . text except OSError : self . ctx . logger . warning ( f \"No response to { url } \" ) content = \"\" # # write to cache item_path . write_text ( content ) self . ctx . logger . debug ( f \"Wrote { url } to { item_name } \" ) # # update cache index self . cache_map [ url ] = item_name self . write_index ( index_path = self . index_path , cache_map = self . cache_map ) # # return response content return content initialise_cache ( cache_directory , ctx ) classmethod Build and preload the cache object Creates if needed the passed cache_directory , and either loads the existing index.json or writes an empty one. Source code in moin2gitwiki/fetch_cache.py @classmethod def initialise_cache ( cls , cache_directory : Path , ctx ): \"\"\" Build and preload the cache object Creates if needed the passed `cache_directory`, and either loads the existing `index.json` or writes an empty one. \"\"\" # ensure directory exists cache_directory . mkdir ( mode = 0o777 , parents = True , exist_ok = True ) # ensure we have it as an absolute path cache_directory = cache_directory . resolve ( strict = True ) # # load the index should it exist index_path = cache_directory . joinpath ( \"index.json\" ) cache_map = {} try : cache_map = json . loads ( index_path . read_text ()) except ( OSError , ValueError ): # if anything goes wrong then we just ignore it and # write out a blank cache file cache_map = {} cls . write_index ( index_path = index_path , cache_map = cache_map ) # # build and return the object ctx . logger . debug ( f \"Building cache in directory { cache_directory } \" ) return cls ( cache_directory = cache_directory , index_path = index_path , cache_map = cache_map , ctx = ctx , ) write_index ( index_path , cache_map ) classmethod Write the cache index out to disk Source code in moin2gitwiki/fetch_cache.py @classmethod def write_index ( cls , index_path : Path , cache_map : dict ): \"\"\"Write the cache index out to disk\"\"\" index_path . write_text ( json . dumps ( cache_map , indent = 2 ))","title":"Fetch Cache"},{"location":"internal/fetch_cache/#moin2gitwiki.fetch_cache","text":"","title":"moin2gitwiki.fetch_cache"},{"location":"internal/fetch_cache/#moin2gitwiki.fetch_cache.FetchCache","text":"Implements a local cache for URLs which can be persistant between runs Basic cache directory which contains an index.json file with a table of URLs and the cache file they map to. Has zero intelligence - assumes everything can be cached for ever - which is reasonable considering the things we request via the cache. Attributes: Name Type Description cache_directory Path Path of the cache directory index_path Path Path of the cache index file - normally index.json within cache_directory cache_map dict The dict mapping URLs to filenames within the cache ctx Context object (used for logging etc)","title":"FetchCache"},{"location":"internal/fetch_cache/#moin2gitwiki.fetch_cache.FetchCache.fetch","text":"Fetch a URL, from the cache if there, otherwise put a copy into cache Source code in moin2gitwiki/fetch_cache.py def fetch ( self , url : str ) -> str : \"\"\"Fetch a URL, from the cache if there, otherwise put a copy into cache\"\"\" # # is this in the cache already if url in self . cache_map : item_name = self . cache_map [ url ] item_path = self . cache_directory . joinpath ( item_name ) try : content = item_path . read_text () self . ctx . logger . debug ( f \"Retrieved { url } from cache\" ) return content except OSError : pass # just move on to refetch # # if you get here then the url is either not in the cache or we # failed to retrieve it off disk - in either case we just fetch it item_name = uuid . uuid4 () . hex item_path = item_path = self . cache_directory . joinpath ( item_name ) self . ctx . logger . debug ( f \"Fetching { url } \" ) try : response = requests . get ( url ) content = response . text except OSError : self . ctx . logger . warning ( f \"No response to { url } \" ) content = \"\" # # write to cache item_path . write_text ( content ) self . ctx . logger . debug ( f \"Wrote { url } to { item_name } \" ) # # update cache index self . cache_map [ url ] = item_name self . write_index ( index_path = self . index_path , cache_map = self . cache_map ) # # return response content return content","title":"fetch()"},{"location":"internal/fetch_cache/#moin2gitwiki.fetch_cache.FetchCache.initialise_cache","text":"Build and preload the cache object Creates if needed the passed cache_directory , and either loads the existing index.json or writes an empty one. Source code in moin2gitwiki/fetch_cache.py @classmethod def initialise_cache ( cls , cache_directory : Path , ctx ): \"\"\" Build and preload the cache object Creates if needed the passed `cache_directory`, and either loads the existing `index.json` or writes an empty one. \"\"\" # ensure directory exists cache_directory . mkdir ( mode = 0o777 , parents = True , exist_ok = True ) # ensure we have it as an absolute path cache_directory = cache_directory . resolve ( strict = True ) # # load the index should it exist index_path = cache_directory . joinpath ( \"index.json\" ) cache_map = {} try : cache_map = json . loads ( index_path . read_text ()) except ( OSError , ValueError ): # if anything goes wrong then we just ignore it and # write out a blank cache file cache_map = {} cls . write_index ( index_path = index_path , cache_map = cache_map ) # # build and return the object ctx . logger . debug ( f \"Building cache in directory { cache_directory } \" ) return cls ( cache_directory = cache_directory , index_path = index_path , cache_map = cache_map , ctx = ctx , )","title":"initialise_cache()"},{"location":"internal/fetch_cache/#moin2gitwiki.fetch_cache.FetchCache.write_index","text":"Write the cache index out to disk Source code in moin2gitwiki/fetch_cache.py @classmethod def write_index ( cls , index_path : Path , cache_map : dict ): \"\"\"Write the cache index out to disk\"\"\" index_path . write_text ( json . dumps ( cache_map , indent = 2 ))","title":"write_index()"},{"location":"internal/gitrevision/","text":"GitExportStream Output a git fast-export formatted stream for each revision This object handles the state information to output the git commits for the Moin wiki revisions. Attributes: Name Type Description output BinaryIO The output file stream of git fast-export commands mark_number int The current git mark number last_commit_mark int The git mark number of the last commit ctx The context object - used for logger and user mapping add_wiki_revision ( self , revision , content ) Add a wiki revision as a git commit Parameters: Name Type Description Default revision MoinEditEntry A wiki revision object required content bytes The content of the wiki object, after translation, as bytes required Source code in moin2gitwiki/gitrevision.py def add_wiki_revision ( self , revision : MoinEditEntry , content : bytes , ): \"\"\" Add a wiki revision as a git commit Parameters: revision: A wiki revision object content: The content of the wiki object, after translation, as bytes \"\"\" name = revision . markdown_page_path () if content is not None : blob_ref = self . output_blob ( content ) elif revision . edit_type == MoinEditType . ATTACH : blob_ref = self . output_blob ( revision . attachment_content_bytes ()) if self . last_commit_mark is None : self . write_string ( f \"reset { self . branch } \\n \" ) self . write_string ( f \"commit { self . branch } \\n \" ) commit_ref = self . write_next_mark () self . write_changer ( \"author\" , revision ) self . write_changer ( \"committer\" , revision ) if revision . comment != \"\" : self . output_data_string ( f \" { revision . comment } \\n \" ) else : if revision . edit_type == MoinEditType . PAGE : self . output_data_string ( f \"Add/Update { name } \\n \" ) elif revision . edit_type == MoinEditType . RENAME : self . output_data_string ( f \"Rename to { name } \\n \" ) elif revision . edit_type == MoinEditType . DELETE : self . output_data_string ( f \"Delete { name } \\n \" ) elif revision . edit_type == MoinEditType . ATTACH : self . output_data_string ( f \"Attach { revision . attachment } to { name } \\n \" ) # commit mark if self . last_commit_mark is not None : self . write_string ( f \"from : { self . last_commit_mark } \\n \" ) # data change if revision . edit_type == MoinEditType . PAGE : self . write_string ( f \"M 100644 : { blob_ref } { name } \\n\\n \" ) elif revision . edit_type == MoinEditType . RENAME : self . write_string ( f \"D { revision . markdown_transform ( revision . previous_page_name ) } \\n \" , ) self . write_string ( f \"M 100644 : { blob_ref } { name } \\n\\n \" ) elif revision . edit_type == MoinEditType . DELETE : self . write_string ( f \"D { name } \\n\\n \" ) elif revision . edit_type == MoinEditType . ATTACH : self . write_string ( f \"M 100644 : { blob_ref } { revision . attachment_destination () } \\n\\n \" , ) self . last_commit_mark = commit_ref self . ctx . logger . debug ( f \"Written commit { commit_ref } \" ) end_stream ( self ) Write the end of stream information Source code in moin2gitwiki/gitrevision.py def end_stream ( self ): \"\"\" Write the end of stream information \"\"\" self . write_string ( f \"reset { self . branch } \\n \" ) self . write_string ( f \"from : { self . last_commit_mark } \\n \" ) get_next_mark ( self ) Increment and return the mark number Source code in moin2gitwiki/gitrevision.py def get_next_mark ( self ): \"\"\" Increment and return the mark number \"\"\" mark = self . mark_number self . mark_number += 1 return mark output_blob ( self , content ) Output a blob object Parameters: Name Type Description Default content bytes The content of the blob, as bytes required Source code in moin2gitwiki/gitrevision.py def output_blob ( self , content : bytes ): \"\"\" Output a blob object Parameters: content: The content of the blob, as bytes \"\"\" self . output . write ( b \"blob \\n \" ) blob_ref = self . write_next_mark () self . output_data ( content ) return blob_ref output_data ( self , content ) Output a set of data bytes Parameters: Name Type Description Default content bytes The content of data, as bytes required Source code in moin2gitwiki/gitrevision.py def output_data ( self , content : bytes ): \"\"\" Output a set of data bytes Parameters: content: The content of data, as bytes \"\"\" self . write_string ( f \"data { len ( content ) } \\n \" ) self . output . write ( content ) output_data_string ( self , string ) Write a string out as a data object with utf-8 encoding into bytes Source code in moin2gitwiki/gitrevision.py def output_data_string ( self , string : str ): \"\"\" Write a string out as a data object with utf-8 encoding into bytes \"\"\" self . output_data ( string . encode ( \"utf-8\" )) write_changer ( self , what , revision ) Add an author/committer entry with date Parameters: Name Type Description Default what str Normally either committer or author required revision MoinEditEntry A wiki revision object required Source code in moin2gitwiki/gitrevision.py def write_changer ( self , what : str , revision : MoinEditEntry ): \"\"\" Add an author/committer entry with date Parameters: what: Normally either `committer` or `author` revision: A wiki revision object \"\"\" self . write_string ( f \" { what } { revision . user . moin_name } < { revision . user . email } > { int ( revision . edit_date . timestamp ()) } +0000 \\n \" , ) write_next_mark ( self ) Write out the next mark number Source code in moin2gitwiki/gitrevision.py def write_next_mark ( self ): \"\"\" Write out the next mark number \"\"\" mark = self . get_next_mark () self . write_string ( f \"mark : { mark } \\n \" ) return mark write_string ( self , string ) Write a string out with utf-8 encoding into bytes Source code in moin2gitwiki/gitrevision.py def write_string ( self , string : str ): \"\"\" Write a string out with utf-8 encoding into bytes \"\"\" self . output . write ( string . encode ( \"utf-8\" ))","title":"Git Revision"},{"location":"internal/gitrevision/#moin2gitwiki.gitrevision","text":"","title":"moin2gitwiki.gitrevision"},{"location":"internal/gitrevision/#moin2gitwiki.gitrevision.GitExportStream","text":"Output a git fast-export formatted stream for each revision This object handles the state information to output the git commits for the Moin wiki revisions. Attributes: Name Type Description output BinaryIO The output file stream of git fast-export commands mark_number int The current git mark number last_commit_mark int The git mark number of the last commit ctx The context object - used for logger and user mapping","title":"GitExportStream"},{"location":"internal/gitrevision/#moin2gitwiki.gitrevision.GitExportStream.add_wiki_revision","text":"Add a wiki revision as a git commit Parameters: Name Type Description Default revision MoinEditEntry A wiki revision object required content bytes The content of the wiki object, after translation, as bytes required Source code in moin2gitwiki/gitrevision.py def add_wiki_revision ( self , revision : MoinEditEntry , content : bytes , ): \"\"\" Add a wiki revision as a git commit Parameters: revision: A wiki revision object content: The content of the wiki object, after translation, as bytes \"\"\" name = revision . markdown_page_path () if content is not None : blob_ref = self . output_blob ( content ) elif revision . edit_type == MoinEditType . ATTACH : blob_ref = self . output_blob ( revision . attachment_content_bytes ()) if self . last_commit_mark is None : self . write_string ( f \"reset { self . branch } \\n \" ) self . write_string ( f \"commit { self . branch } \\n \" ) commit_ref = self . write_next_mark () self . write_changer ( \"author\" , revision ) self . write_changer ( \"committer\" , revision ) if revision . comment != \"\" : self . output_data_string ( f \" { revision . comment } \\n \" ) else : if revision . edit_type == MoinEditType . PAGE : self . output_data_string ( f \"Add/Update { name } \\n \" ) elif revision . edit_type == MoinEditType . RENAME : self . output_data_string ( f \"Rename to { name } \\n \" ) elif revision . edit_type == MoinEditType . DELETE : self . output_data_string ( f \"Delete { name } \\n \" ) elif revision . edit_type == MoinEditType . ATTACH : self . output_data_string ( f \"Attach { revision . attachment } to { name } \\n \" ) # commit mark if self . last_commit_mark is not None : self . write_string ( f \"from : { self . last_commit_mark } \\n \" ) # data change if revision . edit_type == MoinEditType . PAGE : self . write_string ( f \"M 100644 : { blob_ref } { name } \\n\\n \" ) elif revision . edit_type == MoinEditType . RENAME : self . write_string ( f \"D { revision . markdown_transform ( revision . previous_page_name ) } \\n \" , ) self . write_string ( f \"M 100644 : { blob_ref } { name } \\n\\n \" ) elif revision . edit_type == MoinEditType . DELETE : self . write_string ( f \"D { name } \\n\\n \" ) elif revision . edit_type == MoinEditType . ATTACH : self . write_string ( f \"M 100644 : { blob_ref } { revision . attachment_destination () } \\n\\n \" , ) self . last_commit_mark = commit_ref self . ctx . logger . debug ( f \"Written commit { commit_ref } \" )","title":"add_wiki_revision()"},{"location":"internal/gitrevision/#moin2gitwiki.gitrevision.GitExportStream.end_stream","text":"Write the end of stream information Source code in moin2gitwiki/gitrevision.py def end_stream ( self ): \"\"\" Write the end of stream information \"\"\" self . write_string ( f \"reset { self . branch } \\n \" ) self . write_string ( f \"from : { self . last_commit_mark } \\n \" )","title":"end_stream()"},{"location":"internal/gitrevision/#moin2gitwiki.gitrevision.GitExportStream.get_next_mark","text":"Increment and return the mark number Source code in moin2gitwiki/gitrevision.py def get_next_mark ( self ): \"\"\" Increment and return the mark number \"\"\" mark = self . mark_number self . mark_number += 1 return mark","title":"get_next_mark()"},{"location":"internal/gitrevision/#moin2gitwiki.gitrevision.GitExportStream.output_blob","text":"Output a blob object Parameters: Name Type Description Default content bytes The content of the blob, as bytes required Source code in moin2gitwiki/gitrevision.py def output_blob ( self , content : bytes ): \"\"\" Output a blob object Parameters: content: The content of the blob, as bytes \"\"\" self . output . write ( b \"blob \\n \" ) blob_ref = self . write_next_mark () self . output_data ( content ) return blob_ref","title":"output_blob()"},{"location":"internal/gitrevision/#moin2gitwiki.gitrevision.GitExportStream.output_data","text":"Output a set of data bytes Parameters: Name Type Description Default content bytes The content of data, as bytes required Source code in moin2gitwiki/gitrevision.py def output_data ( self , content : bytes ): \"\"\" Output a set of data bytes Parameters: content: The content of data, as bytes \"\"\" self . write_string ( f \"data { len ( content ) } \\n \" ) self . output . write ( content )","title":"output_data()"},{"location":"internal/gitrevision/#moin2gitwiki.gitrevision.GitExportStream.output_data_string","text":"Write a string out as a data object with utf-8 encoding into bytes Source code in moin2gitwiki/gitrevision.py def output_data_string ( self , string : str ): \"\"\" Write a string out as a data object with utf-8 encoding into bytes \"\"\" self . output_data ( string . encode ( \"utf-8\" ))","title":"output_data_string()"},{"location":"internal/gitrevision/#moin2gitwiki.gitrevision.GitExportStream.write_changer","text":"Add an author/committer entry with date Parameters: Name Type Description Default what str Normally either committer or author required revision MoinEditEntry A wiki revision object required Source code in moin2gitwiki/gitrevision.py def write_changer ( self , what : str , revision : MoinEditEntry ): \"\"\" Add an author/committer entry with date Parameters: what: Normally either `committer` or `author` revision: A wiki revision object \"\"\" self . write_string ( f \" { what } { revision . user . moin_name } < { revision . user . email } > { int ( revision . edit_date . timestamp ()) } +0000 \\n \" , )","title":"write_changer()"},{"location":"internal/gitrevision/#moin2gitwiki.gitrevision.GitExportStream.write_next_mark","text":"Write out the next mark number Source code in moin2gitwiki/gitrevision.py def write_next_mark ( self ): \"\"\" Write out the next mark number \"\"\" mark = self . get_next_mark () self . write_string ( f \"mark : { mark } \\n \" ) return mark","title":"write_next_mark()"},{"location":"internal/gitrevision/#moin2gitwiki.gitrevision.GitExportStream.write_string","text":"Write a string out with utf-8 encoding into bytes Source code in moin2gitwiki/gitrevision.py def write_string ( self , string : str ): \"\"\" Write a string out with utf-8 encoding into bytes \"\"\" self . output . write ( string . encode ( \"utf-8\" ))","title":"write_string()"},{"location":"internal/moin2markdown/","text":"Moin2Markdown Conversion object to convert MoinMoin wiki markup to Markdown Attributes: Name Type Description fetch_cache FetchCache A FetchCache object used to retrieve URLs url_prefix furl The URL prefix of the Moin wiki web presence link_table A mapping of Moin unescaped names to page names ctx Context object - logger and user mapping etc create_translator ( ctx , cache_directory , url_prefix , revisions ) classmethod Build a translator object Parameters: Name Type Description Default ctx Context object (logger etc) required cache_directory Path Path object for the cache directory required url_prefix str The base URL for the MoinMoin wiki required link_table A translation table for wiki links required Source code in moin2gitwiki/moin2markdown.py @classmethod def create_translator ( cls , ctx , cache_directory : Path , url_prefix : str , revisions : MoinEditEntries , ): \"\"\" Build a translator object Parameters: ctx: Context object (logger etc) cache_directory: Path object for the cache directory url_prefix: The base URL for the MoinMoin wiki link_table: A translation table for wiki links \"\"\" # # Build a fetch cache fetch_cache = FetchCache . initialise_cache ( cache_directory = cache_directory , ctx = ctx , ) return cls ( fetch_cache = fetch_cache , revisions = revisions , url_prefix = furl ( url_prefix ), ctx = ctx , ) extract_content_section ( self , html ) Extract the content part of the HTML, and simplify Parameters: Name Type Description Default html str The html data required Pulls out the content div and simplifies the HTML. Simplification consists of:- stripping out redundant anchor spans remove the additional line marking paragraphs rewrite a/hrefs strip internal a/hrefs that have no existng target strip class attributes from links remap any emoji img to the emoji sequence Source code in moin2gitwiki/moin2markdown.py def extract_content_section ( self , html : str ) -> str : \"\"\" Extract the content part of the HTML, and simplify Parameters: html: The html data Pulls out the content div and simplifies the HTML. Simplification consists of:- - stripping out redundant anchor spans - remove the additional line marking paragraphs - rewrite a/hrefs - strip internal a/hrefs that have no existng target - strip class attributes from links - remap any emoji img to the emoji sequence \"\"\" soup = BeautifulSoup ( html , \"html.parser\" ) content = soup . find ( id = \"content\" ) if content is None : return \"\" # # now strip out excess rubbish - anchor spans for tag in content . find_all ( class_ = \"anchor\" ): tag . decompose () # # Remove dead <p class=\"line???\"> with no closer for tag in content . find_all ( is_a_linemark_para ): tag . unwrap () # # now find all the links, and if within the wiki, rewrite for tag in content . find_all ( \"a\" ): target = tag [ \"href\" ] if target : self . ctx . logger . debug ( f \"Trying to map link { target } \" ) url = self . url_prefix . copy () . join ( target ) if url . url . startswith ( self . url_prefix . url ): new_url = ( url . copy () . remove ( query = True ) . url [ len ( self . url_prefix . url ) :] ) if len ( str ( url . query )) == 0 : # no query - this is a conventional link new_target = self . revisions . get_new_link_target ( new_url ) if new_target : tag [ \"href\" ] = new_target self . ctx . logger . debug ( f \"Normal map -> { new_target } \" ) elif ( \"action\" in url . query . params and \"target\" in url . query . params and url . query . params [ \"action\" ] == \"AttachFile\" ): attach_target = url . query . params [ \"target\" ] new_target = self . revisions . get_new_attachment_link_target ( new_url , attach_target , ) if new_target : tag [ \"href\" ] = new_target self . ctx . logger . debug ( f \"Attach map -> { new_target } \" ) else : tag . unwrap () # # strip any class attributes on links - tend to upset the translator if tag . has_attr ( \"class\" ): del tag [ \"class\" ] # # now find all the images and see if they map to emojis # MoinMoin puts the emoji code in the title, so will purely match on that for tag in content . find_all ( \"img\" ): target = tag [ \"src\" ] if tag . has_attr ( \"title\" ) and tag [ \"title\" ] in self . smiley_map : tag . replace_with ( \" \" + self . smiley_map [ tag [ \"title\" ]] + \" \" ) elif target : # now find all the images, and if an attachment within the wiki, rewrite url = self . url_prefix . copy () . join ( target ) if url . url . startswith ( self . url_prefix . url ): new_url = url . remove ( query = True ) . url [ len ( self . url_prefix . url ) :] if ( \"action\" in url . query . params and \"target\" in url . query . params and url . query . params [ \"action\" ] == \"AttachFile\" ): attach_target = url . query . params [ \"target\" ] new_target = self . revisions . get_new_attachment_link_target ( new_url , attach_target , ) if new_target : tag [ \"href\" ] = new_target # # This might not always work but removing all <div>s makes output cleaner for tag in content . find_all ( \"div\" ): tag . unwrap () return \"\" . join ([ str ( x ) for x in content . contents ]) retrieve_and_translate ( self , revision ) Retrieve a wiki revision, and translate it to markdown Parameters: Name Type Description Default revision MoinEditEntry The wiki revision object for the revision we want required If the revision maps to an empty object - ie it deleted the page, or similar, then a None object is returned. Source code in moin2gitwiki/moin2markdown.py def retrieve_and_translate ( self , revision : MoinEditEntry ) -> Optional [ bytes ]: \"\"\" Retrieve a wiki revision, and translate it to markdown Parameters: revision: The wiki revision object for the revision we want If the revision maps to an empty object - ie it deleted the page, or similar, then a None object is returned. \"\"\" # check if this revision has any content... lines = revision . wiki_content () if lines is None : return None else : target = self . url_prefix . copy () target /= revision . page_path_unescaped () target . args [ \"action\" ] = \"recall\" target . args [ \"rev\" ] = revision . page_revision content = self . fetch_cache . fetch ( target . url ) main_content = self . extract_content_section ( content ) translated = self . translate ( main_content ) return translated translate ( self , input ) Translate HTML to Github Flavoured Markdown using pandoc Source code in moin2gitwiki/moin2markdown.py def translate ( self , input : str ) -> bytes : \"\"\"Translate HTML to Github Flavoured Markdown using pandoc\"\"\" process = subprocess . Popen ( [ \"pandoc\" , \"-f\" , \"html\" , \"-t\" , \"gfm\" ], stdin = subprocess . PIPE , stdout = subprocess . PIPE , ) ( output , _ ) = process . communicate ( input . encode ( \"utf-8\" )) return output","title":"Moin To Markdown"},{"location":"internal/moin2markdown/#moin2gitwiki.moin2markdown","text":"","title":"moin2gitwiki.moin2markdown"},{"location":"internal/moin2markdown/#moin2gitwiki.moin2markdown.Moin2Markdown","text":"Conversion object to convert MoinMoin wiki markup to Markdown Attributes: Name Type Description fetch_cache FetchCache A FetchCache object used to retrieve URLs url_prefix furl The URL prefix of the Moin wiki web presence link_table A mapping of Moin unescaped names to page names ctx Context object - logger and user mapping etc","title":"Moin2Markdown"},{"location":"internal/moin2markdown/#moin2gitwiki.moin2markdown.Moin2Markdown.create_translator","text":"Build a translator object Parameters: Name Type Description Default ctx Context object (logger etc) required cache_directory Path Path object for the cache directory required url_prefix str The base URL for the MoinMoin wiki required link_table A translation table for wiki links required Source code in moin2gitwiki/moin2markdown.py @classmethod def create_translator ( cls , ctx , cache_directory : Path , url_prefix : str , revisions : MoinEditEntries , ): \"\"\" Build a translator object Parameters: ctx: Context object (logger etc) cache_directory: Path object for the cache directory url_prefix: The base URL for the MoinMoin wiki link_table: A translation table for wiki links \"\"\" # # Build a fetch cache fetch_cache = FetchCache . initialise_cache ( cache_directory = cache_directory , ctx = ctx , ) return cls ( fetch_cache = fetch_cache , revisions = revisions , url_prefix = furl ( url_prefix ), ctx = ctx , )","title":"create_translator()"},{"location":"internal/moin2markdown/#moin2gitwiki.moin2markdown.Moin2Markdown.extract_content_section","text":"Extract the content part of the HTML, and simplify Parameters: Name Type Description Default html str The html data required Pulls out the content div and simplifies the HTML. Simplification consists of:- stripping out redundant anchor spans remove the additional line marking paragraphs rewrite a/hrefs strip internal a/hrefs that have no existng target strip class attributes from links remap any emoji img to the emoji sequence Source code in moin2gitwiki/moin2markdown.py def extract_content_section ( self , html : str ) -> str : \"\"\" Extract the content part of the HTML, and simplify Parameters: html: The html data Pulls out the content div and simplifies the HTML. Simplification consists of:- - stripping out redundant anchor spans - remove the additional line marking paragraphs - rewrite a/hrefs - strip internal a/hrefs that have no existng target - strip class attributes from links - remap any emoji img to the emoji sequence \"\"\" soup = BeautifulSoup ( html , \"html.parser\" ) content = soup . find ( id = \"content\" ) if content is None : return \"\" # # now strip out excess rubbish - anchor spans for tag in content . find_all ( class_ = \"anchor\" ): tag . decompose () # # Remove dead <p class=\"line???\"> with no closer for tag in content . find_all ( is_a_linemark_para ): tag . unwrap () # # now find all the links, and if within the wiki, rewrite for tag in content . find_all ( \"a\" ): target = tag [ \"href\" ] if target : self . ctx . logger . debug ( f \"Trying to map link { target } \" ) url = self . url_prefix . copy () . join ( target ) if url . url . startswith ( self . url_prefix . url ): new_url = ( url . copy () . remove ( query = True ) . url [ len ( self . url_prefix . url ) :] ) if len ( str ( url . query )) == 0 : # no query - this is a conventional link new_target = self . revisions . get_new_link_target ( new_url ) if new_target : tag [ \"href\" ] = new_target self . ctx . logger . debug ( f \"Normal map -> { new_target } \" ) elif ( \"action\" in url . query . params and \"target\" in url . query . params and url . query . params [ \"action\" ] == \"AttachFile\" ): attach_target = url . query . params [ \"target\" ] new_target = self . revisions . get_new_attachment_link_target ( new_url , attach_target , ) if new_target : tag [ \"href\" ] = new_target self . ctx . logger . debug ( f \"Attach map -> { new_target } \" ) else : tag . unwrap () # # strip any class attributes on links - tend to upset the translator if tag . has_attr ( \"class\" ): del tag [ \"class\" ] # # now find all the images and see if they map to emojis # MoinMoin puts the emoji code in the title, so will purely match on that for tag in content . find_all ( \"img\" ): target = tag [ \"src\" ] if tag . has_attr ( \"title\" ) and tag [ \"title\" ] in self . smiley_map : tag . replace_with ( \" \" + self . smiley_map [ tag [ \"title\" ]] + \" \" ) elif target : # now find all the images, and if an attachment within the wiki, rewrite url = self . url_prefix . copy () . join ( target ) if url . url . startswith ( self . url_prefix . url ): new_url = url . remove ( query = True ) . url [ len ( self . url_prefix . url ) :] if ( \"action\" in url . query . params and \"target\" in url . query . params and url . query . params [ \"action\" ] == \"AttachFile\" ): attach_target = url . query . params [ \"target\" ] new_target = self . revisions . get_new_attachment_link_target ( new_url , attach_target , ) if new_target : tag [ \"href\" ] = new_target # # This might not always work but removing all <div>s makes output cleaner for tag in content . find_all ( \"div\" ): tag . unwrap () return \"\" . join ([ str ( x ) for x in content . contents ])","title":"extract_content_section()"},{"location":"internal/moin2markdown/#moin2gitwiki.moin2markdown.Moin2Markdown.retrieve_and_translate","text":"Retrieve a wiki revision, and translate it to markdown Parameters: Name Type Description Default revision MoinEditEntry The wiki revision object for the revision we want required If the revision maps to an empty object - ie it deleted the page, or similar, then a None object is returned. Source code in moin2gitwiki/moin2markdown.py def retrieve_and_translate ( self , revision : MoinEditEntry ) -> Optional [ bytes ]: \"\"\" Retrieve a wiki revision, and translate it to markdown Parameters: revision: The wiki revision object for the revision we want If the revision maps to an empty object - ie it deleted the page, or similar, then a None object is returned. \"\"\" # check if this revision has any content... lines = revision . wiki_content () if lines is None : return None else : target = self . url_prefix . copy () target /= revision . page_path_unescaped () target . args [ \"action\" ] = \"recall\" target . args [ \"rev\" ] = revision . page_revision content = self . fetch_cache . fetch ( target . url ) main_content = self . extract_content_section ( content ) translated = self . translate ( main_content ) return translated","title":"retrieve_and_translate()"},{"location":"internal/moin2markdown/#moin2gitwiki.moin2markdown.Moin2Markdown.translate","text":"Translate HTML to Github Flavoured Markdown using pandoc Source code in moin2gitwiki/moin2markdown.py def translate ( self , input : str ) -> bytes : \"\"\"Translate HTML to Github Flavoured Markdown using pandoc\"\"\" process = subprocess . Popen ( [ \"pandoc\" , \"-f\" , \"html\" , \"-t\" , \"gfm\" ], stdin = subprocess . PIPE , stdout = subprocess . PIPE , ) ( output , _ ) = process . communicate ( input . encode ( \"utf-8\" )) return output","title":"translate()"},{"location":"internal/users/","text":"Moin2GitUser Represents a Moin user - for mapping to git user commits Attributes: Name Type Description moin_id str MoinMoin user id - multi-component numeric string moin_name str The Moin username - used as a git name email str Email address of the user account load_user_from_file ( path , logger ) classmethod Reads the user data in from a moin user config file Source code in moin2gitwiki/users.py @classmethod def load_user_from_file ( cls , path , logger ): \"\"\" Reads the user data in from a moin user config file \"\"\" with open ( path ) as f : data = f . read () moin_id = os . path . basename ( path ) user_dict = dict ( re . findall ( r \"^([a-z_]+)=(.*)$\" , data , flags = re . MULTILINE )) params = { \"moin_id\" : moin_id , \"moin_name\" : user_dict [ \"name\" ]} if user_dict [ \"email\" ] is not None and user_dict [ \"email\" ] != \"\" : params [ \"email\" ] = re . sub ( \"[^A-Za-z0-9@._-]\" , \"\" , user_dict [ \"email\" ]) user = cls ( ** params ) logger . debug ( f \"User added: { user . moin_name } \" ) return user Moin2GitUserSet Represents a set of Moin users for mapping into git Attributes: Name Type Description id_map dict maps moin user ids to Moin2GitUser objects name_map dict maps moin user names to Moin2GitUser objects create_from_users ( users , logger ) classmethod Builds a Moin2GitUserSet from a list of Moin2GitUser objects Source code in moin2gitwiki/users.py @classmethod def create_from_users ( cls , users , logger ): \"\"\" Builds a Moin2GitUserSet from a list of Moin2GitUser objects \"\"\" id_map = {} name_map = {} for user in users : id_map [ user . moin_id ] = user name_map [ user . moin_name ] = user # make sure we have an anonymous entry for things we cannot put a user to if \"anonymous\" not in name_map : anonymous = Moin2GitUser ( moin_id = \"0000000000.00.00000\" , moin_name = \"anonymous\" , email = \"anonymous@example.org\" , ) id_map [ anonymous . moin_id ] = anonymous name_map [ anonymous . moin_name ] = anonymous # package all the users into a set logger . debug ( \"Building user set object\" ) return cls ( id_map = id_map , name_map = name_map ) get_user_by_id ( self , ident ) Gets a Moin2GitUser by matching a moin id Source code in moin2gitwiki/users.py def get_user_by_id ( self , ident ): \"\"\" Gets a Moin2GitUser by matching a moin id \"\"\" return self . id_map [ ident ] get_user_by_id_or_anonymous ( self , ident ) Gets a Moin2GitUser by matching a moin id. If non-existant returns the anonymous id Source code in moin2gitwiki/users.py def get_user_by_id_or_anonymous ( self , ident ): \"\"\" Gets a Moin2GitUser by matching a moin id. If non-existant returns the anonymous id \"\"\" if ident is None or ident not in self . id_map : return self . get_user_by_name ( \"anonymous\" ) else : return self . get_user_by_id ( ident ) get_user_by_name ( self , name ) Gets a Moin2GitUser by matching moin name Source code in moin2gitwiki/users.py def get_user_by_name ( self , name ): \"\"\" Gets a Moin2GitUser by matching moin name \"\"\" return self . name_map [ name ] load_users_from_file ( path , logger ) classmethod Builds a Moin2GitUserSet from a saved json file Source code in moin2gitwiki/users.py @classmethod def load_users_from_file ( cls , path , logger ): \"\"\" Builds a Moin2GitUserSet from a saved json file \"\"\" logger . debug ( f \"Loading wiki users from { path } \" ) with open ( path ) as f : user_data_set = json . loads ( f . read ()) users = [] for entry in user_data_set : user = Moin2GitUser ( ** entry ) users . append ( user ) logger . debug ( f \"Loaded user name { user . moin_name } \" ) return cls . create_from_users ( users = users , logger = logger ) load_users_from_wiki_data ( wiki_data_path , logger ) classmethod Builds a Moin2GitUserSet from the wiki filesystem Source code in moin2gitwiki/users.py @classmethod def load_users_from_wiki_data ( cls , wiki_data_path , logger ): \"\"\" Builds a Moin2GitUserSet from the wiki filesystem \"\"\" users_dir = os . path . join ( wiki_data_path , \"user\" ) logger . debug ( f \"Loading wiki users from { users_dir } \" ) users = [] for moin_id in os . listdir ( users_dir ): # check the moin id filename looks right if re . match ( r \"\\d+\\.\\d+\\.\\d+$\" , moin_id ): try : logger . debug ( f \"Loading user id { moin_id } \" ) user = Moin2GitUser . load_user_from_file ( path = os . path . join ( users_dir , moin_id ), logger = logger , ) users . append ( user ) except OSError : continue return cls . create_from_users ( users = users , logger = logger ) save_users_to_file ( self , path ) Writes a Moin2GitUserSet to a saved json file Source code in moin2gitwiki/users.py def save_users_to_file ( self , path ): \"\"\" Writes a Moin2GitUserSet to a saved json file \"\"\" user_data = [] for user in self . name_map . values (): user_data . append ( attr . asdict ( user )) with open ( path , \"w\" ) as f : json . dump ( user_data , f , indent = 2 , sort_keys = True )","title":"Users"},{"location":"internal/users/#moin2gitwiki.users","text":"","title":"moin2gitwiki.users"},{"location":"internal/users/#moin2gitwiki.users.Moin2GitUser","text":"Represents a Moin user - for mapping to git user commits Attributes: Name Type Description moin_id str MoinMoin user id - multi-component numeric string moin_name str The Moin username - used as a git name email str Email address of the user account","title":"Moin2GitUser"},{"location":"internal/users/#moin2gitwiki.users.Moin2GitUser.load_user_from_file","text":"Reads the user data in from a moin user config file Source code in moin2gitwiki/users.py @classmethod def load_user_from_file ( cls , path , logger ): \"\"\" Reads the user data in from a moin user config file \"\"\" with open ( path ) as f : data = f . read () moin_id = os . path . basename ( path ) user_dict = dict ( re . findall ( r \"^([a-z_]+)=(.*)$\" , data , flags = re . MULTILINE )) params = { \"moin_id\" : moin_id , \"moin_name\" : user_dict [ \"name\" ]} if user_dict [ \"email\" ] is not None and user_dict [ \"email\" ] != \"\" : params [ \"email\" ] = re . sub ( \"[^A-Za-z0-9@._-]\" , \"\" , user_dict [ \"email\" ]) user = cls ( ** params ) logger . debug ( f \"User added: { user . moin_name } \" ) return user","title":"load_user_from_file()"},{"location":"internal/users/#moin2gitwiki.users.Moin2GitUserSet","text":"Represents a set of Moin users for mapping into git Attributes: Name Type Description id_map dict maps moin user ids to Moin2GitUser objects name_map dict maps moin user names to Moin2GitUser objects","title":"Moin2GitUserSet"},{"location":"internal/users/#moin2gitwiki.users.Moin2GitUserSet.create_from_users","text":"Builds a Moin2GitUserSet from a list of Moin2GitUser objects Source code in moin2gitwiki/users.py @classmethod def create_from_users ( cls , users , logger ): \"\"\" Builds a Moin2GitUserSet from a list of Moin2GitUser objects \"\"\" id_map = {} name_map = {} for user in users : id_map [ user . moin_id ] = user name_map [ user . moin_name ] = user # make sure we have an anonymous entry for things we cannot put a user to if \"anonymous\" not in name_map : anonymous = Moin2GitUser ( moin_id = \"0000000000.00.00000\" , moin_name = \"anonymous\" , email = \"anonymous@example.org\" , ) id_map [ anonymous . moin_id ] = anonymous name_map [ anonymous . moin_name ] = anonymous # package all the users into a set logger . debug ( \"Building user set object\" ) return cls ( id_map = id_map , name_map = name_map )","title":"create_from_users()"},{"location":"internal/users/#moin2gitwiki.users.Moin2GitUserSet.get_user_by_id","text":"Gets a Moin2GitUser by matching a moin id Source code in moin2gitwiki/users.py def get_user_by_id ( self , ident ): \"\"\" Gets a Moin2GitUser by matching a moin id \"\"\" return self . id_map [ ident ]","title":"get_user_by_id()"},{"location":"internal/users/#moin2gitwiki.users.Moin2GitUserSet.get_user_by_id_or_anonymous","text":"Gets a Moin2GitUser by matching a moin id. If non-existant returns the anonymous id Source code in moin2gitwiki/users.py def get_user_by_id_or_anonymous ( self , ident ): \"\"\" Gets a Moin2GitUser by matching a moin id. If non-existant returns the anonymous id \"\"\" if ident is None or ident not in self . id_map : return self . get_user_by_name ( \"anonymous\" ) else : return self . get_user_by_id ( ident )","title":"get_user_by_id_or_anonymous()"},{"location":"internal/users/#moin2gitwiki.users.Moin2GitUserSet.get_user_by_name","text":"Gets a Moin2GitUser by matching moin name Source code in moin2gitwiki/users.py def get_user_by_name ( self , name ): \"\"\" Gets a Moin2GitUser by matching moin name \"\"\" return self . name_map [ name ]","title":"get_user_by_name()"},{"location":"internal/users/#moin2gitwiki.users.Moin2GitUserSet.load_users_from_file","text":"Builds a Moin2GitUserSet from a saved json file Source code in moin2gitwiki/users.py @classmethod def load_users_from_file ( cls , path , logger ): \"\"\" Builds a Moin2GitUserSet from a saved json file \"\"\" logger . debug ( f \"Loading wiki users from { path } \" ) with open ( path ) as f : user_data_set = json . loads ( f . read ()) users = [] for entry in user_data_set : user = Moin2GitUser ( ** entry ) users . append ( user ) logger . debug ( f \"Loaded user name { user . moin_name } \" ) return cls . create_from_users ( users = users , logger = logger )","title":"load_users_from_file()"},{"location":"internal/users/#moin2gitwiki.users.Moin2GitUserSet.load_users_from_wiki_data","text":"Builds a Moin2GitUserSet from the wiki filesystem Source code in moin2gitwiki/users.py @classmethod def load_users_from_wiki_data ( cls , wiki_data_path , logger ): \"\"\" Builds a Moin2GitUserSet from the wiki filesystem \"\"\" users_dir = os . path . join ( wiki_data_path , \"user\" ) logger . debug ( f \"Loading wiki users from { users_dir } \" ) users = [] for moin_id in os . listdir ( users_dir ): # check the moin id filename looks right if re . match ( r \"\\d+\\.\\d+\\.\\d+$\" , moin_id ): try : logger . debug ( f \"Loading user id { moin_id } \" ) user = Moin2GitUser . load_user_from_file ( path = os . path . join ( users_dir , moin_id ), logger = logger , ) users . append ( user ) except OSError : continue return cls . create_from_users ( users = users , logger = logger )","title":"load_users_from_wiki_data()"},{"location":"internal/users/#moin2gitwiki.users.Moin2GitUserSet.save_users_to_file","text":"Writes a Moin2GitUserSet to a saved json file Source code in moin2gitwiki/users.py def save_users_to_file ( self , path ): \"\"\" Writes a Moin2GitUserSet to a saved json file \"\"\" user_data = [] for user in self . name_map . values (): user_data . append ( attr . asdict ( user )) with open ( path , \"w\" ) as f : json . dump ( user_data , f , indent = 2 , sort_keys = True )","title":"save_users_to_file()"},{"location":"internal/wikiindex/","text":"MoinEditEntries A sorted collection of Moin revision entry objects create_home_page ( self ) Builds a synthetic home page to link all the wiki entries together Source code in moin2gitwiki/wikiindex.py def create_home_page ( self ) -> Tuple [ MoinEditEntry , str ]: \"\"\"Builds a synthetic home page to link all the wiki entries together\"\"\" revision = MoinEditEntry ( edit_date = datetime . now (), page_revision = \"1\" , edit_type = MoinEditType . PAGE , page_name = \"Home\" , attachment = \"\" , comment = \"Synthetic Home Page\" , page_path = \"Home\" , user = self . ctx . users . get_user_by_id_or_anonymous ( \"0\" ), ctx = self . ctx , ) pages = set () for entry in self . entries : if entry . page_name . find ( \"(2f)\" ) < 0 : pages . add ( entry . markdown_page_name ()) content = \"# Home Page \\n\\n \" for item in sorted ( pages ): content += f \"- [ { item } ]( { item } ) \\n \" content += \" \\n ---- \\n \" return ( revision , content ) MoinEditEntry Represents a Moin page revision There are multiple revisions per page. Attributes: Name Type Description edit_date datetime The date of the edit page_revision str The revision id of this revision - a string of a zero padded number edit_type MoinEditType Moin edit type page_name str The name of the page from the index file previous_page_name str The name the page previously had if renamed page_path str The name on the filesystem of the page attachment str attachment field - not used comment str comment filed - only used for git comments user Moin2GitUser the mapped moin user ctx Context - there for moin_path and logging attachment_content_bytes ( self ) The content of the attachment retrieved as a byte string Source code in moin2gitwiki/wikiindex.py def attachment_content_bytes ( self ): \"\"\"The content of the attachment retrieved as a byte string\"\"\" data = self . attachment_content_path () . read_bytes () return data attachment_content_path ( self ) The file pathname of the attachment file Source code in moin2gitwiki/wikiindex.py def attachment_content_path ( self ): \"\"\"The file pathname of the attachment file\"\"\" if self . attachment is None : raise ValueError ( \"No attachment path set\" ) return self . ctx . moin_data . joinpath ( \"pages\" , self . page_path , \"attachments\" , self . attachment , ) attachment_destination ( self ) The new pathname of the attachment file Source code in moin2gitwiki/wikiindex.py def attachment_destination ( self ): \"\"\"The new pathname of the attachment file\"\"\" if self . attachment is None : raise ValueError ( \"No attachment path set\" ) return os . path . join ( \"_attachments\" , self . page_path , self . attachment , ) markdown_page_name ( self ) Page name translated Source code in moin2gitwiki/wikiindex.py def markdown_page_name ( self ): \"\"\"Page name translated\"\"\" return self . markdown_transform ( self . page_name ) markdown_page_path ( self ) Page path translated Source code in moin2gitwiki/wikiindex.py def markdown_page_path ( self ): \"\"\"Page path translated\"\"\" return self . markdown_transform ( self . page_name ) + \".md\" markdown_transform ( self , thing ) Translates the (2f) to _ for use in Markdown page names Source code in moin2gitwiki/wikiindex.py def markdown_transform ( self , thing : str ) -> str : \"\"\"Translates the (2f) to _ for use in Markdown page names\"\"\" return thing . replace ( \"(2f)\" , \"_\" ) page_name_unescaped ( self ) Unescape the page name Source code in moin2gitwiki/wikiindex.py def page_name_unescaped ( self ) -> str : \"\"\"Unescape the page name\"\"\" return self . unescape ( self . page_name ) page_path_unescaped ( self ) Unescape the page path Source code in moin2gitwiki/wikiindex.py def page_path_unescaped ( self ) -> str : \"\"\"Unescape the page path\"\"\" return self . unescape ( self . page_path ) unescape ( self , thing ) Uescape a wiki name - translate (2f) to / Source code in moin2gitwiki/wikiindex.py def unescape ( self , thing : str ) -> str : \"\"\"Uescape a wiki name - translate (2f) to /\"\"\" return thing . replace ( \"(2f)\" , \"/\" ) wiki_content ( self ) The content of the wiki revision as an array of strings Source code in moin2gitwiki/wikiindex.py def wiki_content ( self ): \"\"\"The content of the wiki revision as an array of strings\"\"\" lines = [] try : lines = self . wiki_content_path () . read_text () . splitlines ( keepends = False ) except OSError : lines = None return lines wiki_content_bytes ( self ) The content of the wiki revision retrieved as a byte string Source code in moin2gitwiki/wikiindex.py def wiki_content_bytes ( self ): \"\"\"The content of the wiki revision retrieved as a byte string\"\"\" lines = self . wiki_content () if lines is None : return lines else : lines . append ( \"\" ) return \" \\n \" . join ( lines ) . encode ( \"utf-8\" ) wiki_content_path ( self ) The file pathname of the revision file Source code in moin2gitwiki/wikiindex.py def wiki_content_path ( self ): \"\"\"The file pathname of the revision file\"\"\" return self . ctx . moin_data . joinpath ( \"pages\" , self . page_path , \"revisions\" , self . page_revision , ) MoinEditType An enumeration.","title":"Wiki Index"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex","text":"","title":"moin2gitwiki.wikiindex"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntries","text":"A sorted collection of Moin revision entry objects","title":"MoinEditEntries"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntries.create_home_page","text":"Builds a synthetic home page to link all the wiki entries together Source code in moin2gitwiki/wikiindex.py def create_home_page ( self ) -> Tuple [ MoinEditEntry , str ]: \"\"\"Builds a synthetic home page to link all the wiki entries together\"\"\" revision = MoinEditEntry ( edit_date = datetime . now (), page_revision = \"1\" , edit_type = MoinEditType . PAGE , page_name = \"Home\" , attachment = \"\" , comment = \"Synthetic Home Page\" , page_path = \"Home\" , user = self . ctx . users . get_user_by_id_or_anonymous ( \"0\" ), ctx = self . ctx , ) pages = set () for entry in self . entries : if entry . page_name . find ( \"(2f)\" ) < 0 : pages . add ( entry . markdown_page_name ()) content = \"# Home Page \\n\\n \" for item in sorted ( pages ): content += f \"- [ { item } ]( { item } ) \\n \" content += \" \\n ---- \\n \" return ( revision , content )","title":"create_home_page()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry","text":"Represents a Moin page revision There are multiple revisions per page. Attributes: Name Type Description edit_date datetime The date of the edit page_revision str The revision id of this revision - a string of a zero padded number edit_type MoinEditType Moin edit type page_name str The name of the page from the index file previous_page_name str The name the page previously had if renamed page_path str The name on the filesystem of the page attachment str attachment field - not used comment str comment filed - only used for git comments user Moin2GitUser the mapped moin user ctx Context - there for moin_path and logging","title":"MoinEditEntry"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry.attachment_content_bytes","text":"The content of the attachment retrieved as a byte string Source code in moin2gitwiki/wikiindex.py def attachment_content_bytes ( self ): \"\"\"The content of the attachment retrieved as a byte string\"\"\" data = self . attachment_content_path () . read_bytes () return data","title":"attachment_content_bytes()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry.attachment_content_path","text":"The file pathname of the attachment file Source code in moin2gitwiki/wikiindex.py def attachment_content_path ( self ): \"\"\"The file pathname of the attachment file\"\"\" if self . attachment is None : raise ValueError ( \"No attachment path set\" ) return self . ctx . moin_data . joinpath ( \"pages\" , self . page_path , \"attachments\" , self . attachment , )","title":"attachment_content_path()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry.attachment_destination","text":"The new pathname of the attachment file Source code in moin2gitwiki/wikiindex.py def attachment_destination ( self ): \"\"\"The new pathname of the attachment file\"\"\" if self . attachment is None : raise ValueError ( \"No attachment path set\" ) return os . path . join ( \"_attachments\" , self . page_path , self . attachment , )","title":"attachment_destination()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry.markdown_page_name","text":"Page name translated Source code in moin2gitwiki/wikiindex.py def markdown_page_name ( self ): \"\"\"Page name translated\"\"\" return self . markdown_transform ( self . page_name )","title":"markdown_page_name()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry.markdown_page_path","text":"Page path translated Source code in moin2gitwiki/wikiindex.py def markdown_page_path ( self ): \"\"\"Page path translated\"\"\" return self . markdown_transform ( self . page_name ) + \".md\"","title":"markdown_page_path()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry.markdown_transform","text":"Translates the (2f) to _ for use in Markdown page names Source code in moin2gitwiki/wikiindex.py def markdown_transform ( self , thing : str ) -> str : \"\"\"Translates the (2f) to _ for use in Markdown page names\"\"\" return thing . replace ( \"(2f)\" , \"_\" )","title":"markdown_transform()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry.page_name_unescaped","text":"Unescape the page name Source code in moin2gitwiki/wikiindex.py def page_name_unescaped ( self ) -> str : \"\"\"Unescape the page name\"\"\" return self . unescape ( self . page_name )","title":"page_name_unescaped()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry.page_path_unescaped","text":"Unescape the page path Source code in moin2gitwiki/wikiindex.py def page_path_unescaped ( self ) -> str : \"\"\"Unescape the page path\"\"\" return self . unescape ( self . page_path )","title":"page_path_unescaped()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry.unescape","text":"Uescape a wiki name - translate (2f) to / Source code in moin2gitwiki/wikiindex.py def unescape ( self , thing : str ) -> str : \"\"\"Uescape a wiki name - translate (2f) to /\"\"\" return thing . replace ( \"(2f)\" , \"/\" )","title":"unescape()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry.wiki_content","text":"The content of the wiki revision as an array of strings Source code in moin2gitwiki/wikiindex.py def wiki_content ( self ): \"\"\"The content of the wiki revision as an array of strings\"\"\" lines = [] try : lines = self . wiki_content_path () . read_text () . splitlines ( keepends = False ) except OSError : lines = None return lines","title":"wiki_content()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry.wiki_content_bytes","text":"The content of the wiki revision retrieved as a byte string Source code in moin2gitwiki/wikiindex.py def wiki_content_bytes ( self ): \"\"\"The content of the wiki revision retrieved as a byte string\"\"\" lines = self . wiki_content () if lines is None : return lines else : lines . append ( \"\" ) return \" \\n \" . join ( lines ) . encode ( \"utf-8\" )","title":"wiki_content_bytes()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditEntry.wiki_content_path","text":"The file pathname of the revision file Source code in moin2gitwiki/wikiindex.py def wiki_content_path ( self ): \"\"\"The file pathname of the revision file\"\"\" return self . ctx . moin_data . joinpath ( \"pages\" , self . page_path , \"revisions\" , self . page_revision , )","title":"wiki_content_path()"},{"location":"internal/wikiindex/#moin2gitwiki.wikiindex.MoinEditType","text":"An enumeration.","title":"MoinEditType"}]}